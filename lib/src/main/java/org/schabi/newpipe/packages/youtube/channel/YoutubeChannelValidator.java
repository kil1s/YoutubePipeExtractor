/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.schabi.newpipe.packages.youtube.channel;

import com.grack.nanojson.JsonObject;
import javax.annotation.Nonnull;
import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException;
import org.schabi.newpipe.packages.youtube.YoutubeValidator;

/**
 *
 * @author Florian
 */
public class YoutubeChannelValidator extends YoutubeValidator {
    /**
     * Assert that a channel JSON response does not contain an {@code error} JSON object.
     *
     * @param jsonResponse a channel JSON response
     * @throws ContentNotAvailableException if the channel was not found
     */
    public void checkIfChannelResponseIsValid(@Nonnull final JsonObject jsonResponse)
            throws ContentNotAvailableException {
        if (!isNullOrEmpty(jsonResponse.getObject("error"))) {
            final JsonObject errorJsonObject = jsonResponse.getObject("error");
            final int errorCode = errorJsonObject.getInt("code");
            if (errorCode == 404) {
                throw new ContentNotAvailableException("This channel doesn't exist.");
            } else {
                throw new ContentNotAvailableException("Got error:\""
                        + errorJsonObject.getString("status") + "\": "
                        + errorJsonObject.getString("message"));
            }
        }
    }
    
    
    /**
     * Check if a channel is verified by using its header.
     *
     * <p>
     * The header is mandatory, so the verified status of age-restricted channels with a
     * {@code channelAgeGateRenderer} cannot be checked.
     * </p>
     *
     * @param channelHeader the {@link ChannelHeader} of a non age-restricted channel
     * @return whether the channel is verified
     */
    public static boolean isChannelVerified(@Nonnull final YoutubeChannelHeader channelHeader) {
        switch (channelHeader.headerType) {
            // carouselHeaderRenderers do not contain any verification badges
            // Since they are only shown on YouTube internal channels or on channels of large
            // organizations broadcasting live events, we can assume the channel to be verified
            case CAROUSEL:
                return true;
            case PAGE:
                final JsonObject pageHeaderViewModel = channelHeader.json.getObject(CONTENT)
                        .getObject(PAGE_HEADER_VIEW_MODEL);

                final boolean hasCircleOrMusicIcon = hasArtistOrVerifiedIconBadgeAttachment(
                        pageHeaderViewModel.getObject(TITLE)
                                .getObject("dynamicTextViewModel")
                                .getObject("text")
                                .getArray("attachmentRuns"));
                if (!hasCircleOrMusicIcon && pageHeaderViewModel.getObject("image")
                        .has("contentPreviewImageViewModel")) {
                    // If a pageHeaderRenderer has no object in which a check verified may be
                    // contained and if it has a contentPreviewImageViewModel, it should mean
                    // that the header is coming from a system channel, which we can assume to
                    // be verified
                    return true;
                }

                return hasCircleOrMusicIcon;
            case INTERACTIVE_TABBED:
                // If the header has an autoGenerated property, it should mean that the channel has
                // been auto generated by YouTube: we can assume the channel to be verified in this
                // case
                return channelHeader.json.has("autoGenerated");
            default:
                return isVerified(channelHeader.json.getArray("badges"));
        }
    }
}
